name: .NET CI/CD

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  PACKAGE_VERSION: 0.0.0
  ASSEMBLY_VERSION: 0.0.0.0
  FILE_VERSION: 0.0.0.0
  INFORMATIONAL_VERSION: 0.0.0+0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        preferLatestVersion: true
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
    - name: Set Version Environment Variables
      run: |
        echo "PACKAGE_VERSION=${{ steps.gitversion.outputs.nuGetVersion }}" >> $GITHUB_ENV
        echo "ASSEMBLY_VERSION=${{ steps.gitversion.outputs.assemblySemVer }}" >> $GITHUB_ENV
        echo "FILE_VERSION=${{ steps.gitversion.outputs.assemblySemFileVer }}" >> $GITHUB_ENV
        echo "INFORMATIONAL_VERSION=${{ steps.gitversion.outputs.informationalVersion }}" >> $GITHUB_ENV
    - name: Display Version Information
      run: |
        echo "Package Version: ${{ env.PACKAGE_VERSION }}"
        echo "Assembly Version: ${{ env.ASSEMBLY_VERSION }}"
        echo "File Version: ${{ env.FILE_VERSION }}"
        echo "Informational Version: ${{ env.INFORMATIONAL_VERSION }}"
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin
          **/obj

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Run tests
      run: dotnet test --no-restore --verbosity normal --logger trx --results-directory ./TestResults --collect:"XPlat Code Coverage"
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults
      if: always()

  pack:
    needs: test
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      package-version: ${{ steps.set_version.outputs.PACKAGE_VERSION }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        preferLatestVersion: true
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
    - name: Set Version Environment Variables
      id: set_version
      run: |
        echo "PACKAGE_VERSION=${{ steps.gitversion.outputs.nuGetVersion }}" >> $GITHUB_OUTPUT
        echo "ASSEMBLY_VERSION=${{ steps.gitversion.outputs.assemblySemVer }}" >> $GITHUB_OUTPUT
        echo "FILE_VERSION=${{ steps.gitversion.outputs.assemblySemFileVer }}" >> $GITHUB_OUTPUT
        echo "INFORMATIONAL_VERSION=${{ steps.gitversion.outputs.informationalVersion }}" >> $GITHUB_OUTPUT
    - name: Display Version Information
      run: |
        echo "Package Version: ${{ steps.set_version.outputs.PACKAGE_VERSION }}"
        echo "Assembly Version: ${{ steps.set_version.outputs.ASSEMBLY_VERSION }}"
        echo "File Version: ${{ steps.set_version.outputs.FILE_VERSION }}"
        echo "Informational Version: ${{ steps.set_version.outputs.INFORMATIONAL_VERSION }}"
    - name: Restore dependencies
      run: dotnet restore
    - name: Pack NuGet Package
      run: dotnet pack --configuration Release --output nupkgs
    - name: Upload NuGet Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: nupkgs

  publish:
    needs: pack
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Download NuGet Package Artifact
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nupkgs
    - name: Publish NuGet Package
      run: |
        echo "Package Version: ${{ needs.pack.outputs.package-version }}"
        dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
