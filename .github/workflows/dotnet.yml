name: .NET CI/CD

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        preferLatestVersion: true
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
    - name: Display GitVersion outputs
      run: |
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
    - name: Clean
      run: dotnet clean
    - name: Restore dependencies
      run: dotnet restore
    - name: Build Project with Versioning
      run: |
        dotnet build --configuration Release \
        /p:Version="${{ steps.gitversion.outputs.nuGetVersion }}" \
        /p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" \
        /p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" \
        /p:InformationalVersion="${{ steps.gitversion.outputs.informationalVersion }}"
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin
          **/obj

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
    - name: Test Project
      run: dotnet test --verbosity normal

  pack:
    needs: test
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Install GitVersion for Packaging
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        preferLatestVersion: true
    - name: Determine Version for Packaging
      id: gitversion-packaging
      uses: gittools/actions/gitversion/execute@v0.10.2
    - name: Restore dependencies
      run: dotnet restore
    - name: Pack NuGet Package with Versioning
      run: |
        dotnet pack --configuration Release --output nupkgs \
        /p:PackageVersion=${{ steps.gitversion-packaging.outputs.nuGetVersion }} \
        /p:AssemblyVersion=${{ steps.gitversion-packaging.outputs.assemblySemVer }} \
        /p:FileVersion=${{ steps.gitversion-packaging.outputs.assemblySemFileVer }} \
        /p:InformationalVersion=${{ steps.gitversion-packaging.outputs.informationalVersion }}
    - name: Upload NuGet Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: nupkgs

  publish:
    needs: pack
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - name: Download NuGet Package Artifact for Publishing
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nupkgs/
    - name: Publish to NuGet.org with API Key Secret
      run: |
        for nupkg in nupkgs/*.nupkg; do
          dotnet nuget push "$nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done
