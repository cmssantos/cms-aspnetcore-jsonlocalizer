name: .NET CI/CD

on:
  push:
    branches: [ "main", "develop" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "develop" ]
  release:
    types: [published]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize Line Endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol crlf
          git add --renormalize .
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            
      - name: Validate Icon File
        run: |
          if [ ! -f icon.png ]; then
            echo "::error::Icon file not found!"
            exit 1
          fi
          
          # Verifica tipo MIME do arquivo
          file_type=$(file -b --mime-type icon.png)
          if [[ "$file_type" != "image/png" && "$file_type" != "image/jpeg" ]]; then
            echo "::error::Invalid image format: $file_type"
            exit 1
          fi
          
          # Verifica tamanho máximo (1MB)
          max_size=1048576
          actual_size=$(wc -c < icon.png)
          if [ $actual_size -gt $max_size ]; then
            echo "::error::Icon size exceeds 1MB (actual: ${actual_size} bytes)"
            exit 1
          fi
      
      - name: Run linter
        run: dotnet format --verify-no-changes --verbosity diagnostic
        
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
          
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.11
      with:
        versionSpec: '6.0.x'
        preferLatestVersion: true

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v3.1.11
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release --no-restore \
        /p:Version=${{ steps.gitversion.outputs.fullSemVer }} \
        /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} \
        /p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} \
        /p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}

  test:
    runs-on: ubuntu-latest
    needs: [lint, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests
        run: dotnet test --configuration Release --collect:"XPlat Code Coverage" --results-directory TestResults
    
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/**/*
        if: always()

  pack:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'
          preferLatestVersion: true

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11

      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --configuration Release --no-restore || (echo "Build failed" && exit 1)

      - name: Pack
        run: |
          if [[ ${{ github.ref }} == refs/heads/develop ]]; then
            VERSION_SUFFIX="-alpha.${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          elif [[ ${{ github.ref }} == refs/heads/main ]]; then
            VERSION_SUFFIX="-beta.${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          else
            VERSION_SUFFIX=""
          fi

          dotnet pack --configuration Release --output nupkgs \
            /p:Version=${{ steps.gitversion.outputs.majorMinorPatch }}$VERSION_SUFFIX \
            /p:PackageVersion=${{ steps.gitversion.outputs.majorMinorPatch }}$VERSION_SUFFIX

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            nupkgs

  publish:
    runs-on: ubuntu-latest
    needs: [test, pack]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: nupkgs

      - name: Publish NuGet package
        run: |
          PACKAGE_PATH="nupkgs"
        
          # Encontrar o primeiro .nupkg não-símbolo correspondente ao branch/tag
          if [[ ${{ github.ref }} == refs/heads/develop ]]; then
            PACKAGE=$(find "$PACKAGE_PATH" -maxdepth 1 -name '*-alpha.*.nupkg' -not -name '*.snupkg' | head -n 1)
          elif [[ ${{ github.ref }} == refs/heads/main ]]; then
            PACKAGE=$(find "$PACKAGE_PATH" -maxdepth 1 -name '*-beta.*.nupkg' -not -name '*.snupkg' | head -n 1)
          elif [[ ${{ github.ref }} == refs/tags/* ]]; then
            PACKAGE=$(find "$PACKAGE_PATH" -maxdepth 1 -name '*.nupkg' -not -name '*-*' -not -name '*.snupkg' | head -n 1)
          else
            echo "::error::Invalid publish context"
            exit 1
          fi

          if [[ -z "$PACKAGE" ]]; then
            echo "::error::No matching package found in $PACKAGE_PATH"
            ls -l "$PACKAGE_PATH" || true
            exit 1
          fi

          echo "Publishing package: $PACKAGE"
          dotnet nuget push "$PACKAGE" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate